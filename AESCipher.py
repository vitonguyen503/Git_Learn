# AES S-box
s_box = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]

inv_s_box = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

# Rcon values for key schedule
rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

def key_expansion(key):

    # Number of 32-bit words in the key
    num_words = len(key) // 4

    # Number of rounds for AES-128
    num_rounds = 10

    # The expanded key starts with the original key
    expanded_key = list(key)

    # Generate the remaining key schedule
    for i in range(num_words, 4 * (num_rounds + 1)):
        temp = expanded_key[(i - 1) * 4:i * 4]

        if i % num_words == 0:
            # RotWord
            temp = temp[1:] + [temp[0]]

            # SubWord
            for j in range(4):
                temp[j] = s_box[temp[j]]

            # XOR with Rcon
            temp[0] ^= rcon[i // num_words - 1]

        elif num_words > 6 and i % num_words == 4:
            # SubWord (for 256-bit keys)
            for j in range(4):
                temp[j] = s_box[temp[j]]

        # XOR with the 4-word previous key
        for j in range(4):
            temp[j] ^= expanded_key[(i - num_words) * 4 + j]

        expanded_key.extend(temp)

    return expanded_key

# Input key as a string of hex characters
input_key = "0f1571c947d9e8590cb7add6af7f6798"
key_bytes = bytes.fromhex(input_key)

# Expand the key
expanded_key = key_expansion(key_bytes)

# Print the expanded key in hex format
print("Expanded Key:")
expanded_key_hex = "".join(format(x, '02x') for x in expanded_key)

for i in range(0, len(expanded_key_hex), 8):
    print(f"Word {i // 8}: ", expanded_key_hex[i:i+8])


def substitute_bytes(state, s_box):
    cnt = 0
    for i in range(4):
        for j in range(4):
            cnt += 1
            state[i][j] = s_box[state[i][j]]

def shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]

def mix_columns(state):
    for i in range(4):
        a = state[i][0]
        b = state[i][1]
        c = state[i][2]
        d = state[i][3]

        state[i][0] = (0x02 * a) ^ (0x03 * b) ^ c ^ d
        state[i][1] = a ^ (0x02 * b) ^ (0x03 * c) ^ d
        state[i][2] = a ^ b ^ (0x02 * c) ^ (0x03 * d)
        state[i][3] = (0x03 * a) ^ b ^ c ^ (0x02 * d)

def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i * 4 + j]

def aes_encrypt_block(block, round_keys):
    state = [[block[i * 4 + j] for j in range(4)] for i in range(4)]

    num_rounds = len(round_keys) // 16 - 1
    add_round_key(state, round_keys[:16])

    for round_num in range(1, num_rounds):
        substitute_bytes(state, s_box)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, round_keys[round_num * 16:(round_num + 1) * 16])

    substitute_bytes(state, s_box)
    shift_rows(state)
    add_round_key(state, round_keys[num_rounds * 16:])

    encrypted_block = []
    for i in range(4):
        for j in range(4):
            encrypted_block.append(state[j][i])

    return encrypted_block

def aes_decrypt_block(block, round_keys):
    state = [[block[i * 4 + j] for j in range(4)] for i in range(4)]

    num_rounds = len(round_keys) // 16 - 1

    add_round_key(state, round_keys[num_rounds * 16:])

    for round_num in range(num_rounds - 1, 0, -1):
        inv_shift_rows(state)
        substitute_bytes(state, inv_s_box)
        add_round_key(state, round_keys[round_num * 16:(round_num + 1) * 16])
        inv_mix_columns(state)

    inv_shift_rows(state)
    substitute_bytes(state, inv_s_box)
    add_round_key(state, round_keys[:16])

    decrypted_block = []
    for i in range(4):
        for j in range(4):
            decrypted_block.append(state[j][i])

    return decrypted_block

def encrypt(data, round_keys):
    encrypted_data = []
    for i in range(0, len(data), 16):
        block = data[i:i + 16]
        encrypted_block = aes_encrypt_block(block, round_keys)
        encrypted_data.extend(encrypted_block)
    return encrypted_data

# Decryption
def decrypt(data, round_keys):
    decrypted_data = []
    for i in range(0, len(data), 16):
        block = data[i:i + 16]
        decrypted_block = aes_decrypt_block(block, round_keys)
        decrypted_data.extend(decrypted_block)
    return decrypted_data

input_key = "0f1571c947d9e8590cb7add6af7f6798"
key_bytes = bytes.fromhex(input_key)
expanded_key = key_expansion(key_bytes)

# Function to encrypt plaintext
def encrypt_plaintext(plaintext_hex, expanded_key):
    plaintext_bytes = bytes.fromhex(plaintext_hex)
    encrypted_data = encrypt(plaintext_bytes, expanded_key)
    encrypted_hex = "".join(format(x, '02x') for x in encrypted_data)
    return encrypted_hex

# Function to decrypt ciphertext
def decrypt_ciphertext(ciphertext_hex, expanded_key):
    ciphertext_bytes = bytes.fromhex(ciphertext_hex)
    decrypted_data = decrypt(ciphertext_bytes, expanded_key)
    decrypted_hex = "".join(format(x, '02x') for x in decrypted_data)
    return decrypted_hex

# Plaintext in hex format
plaintext_hex = "0123456789abcdeffedcba9876543210"

# Encrypt the plaintext
encrypted_hex = encrypt_plaintext(plaintext_hex, expanded_key)
print("Encrypted Hex:", encrypted_hex)

# Decrypt the ciphertext
decrypted_hex = decrypt_ciphertext(encrypted_hex, expanded_key)
print("Decrypted Hex:", decrypted_hex)

# Convert decrypted_hex back to ASCII
decrypted_text = bytes.fromhex(decrypted_hex).decode('utf-8')
print("Decrypted Text:", decrypted_text)
